var gamedata = {'categories': ['Operators', 'Conditional Code', 'Loops',
			   'Reserved Words', 'Objects', 'Functions'],
	    'values': ['$200', '$400', '$600', '$800', '$1000'],
	    'qadata': {'id0x0': ['This operator will evaluate to true if the first operand is less than the second operand.' , 'What is the less than (<) operator?'],
		       'id0x1': ['In JavaScript, the value of w in the statement:    w = 7 * (4 + 5) is __.'  , 'What is 63?'],
		       'id0x2': ['The ++ operator will increase the value of a variable by ___.' , 'What is one?'],
		       'id0x3': ['If you do not declare a variable using the var keyword, it is this type of variable.' , 'What is a global variable?'],
		       'id0x4': ['The == operator will perform a  ____   _____________ if the two operands are of different types.' , 'What is type conversion?'],
		       'id1x0': ['In an if statement, the value inside of parenthesis must evaluate to ____ in order to execute the statement.' , 'What is true?'],
		       'id1x1': ['(T/F) In JavaScript, the value 4 evaluates to true.', 'What is true?'],
		       'id1x2': [' (T/F) In JavaScript, the value ‘null’ evaluates to false. ', 'What is false?'],
		       'id1x3': ['For the statement:  var p = m ? 3 : 9; and m = true, then the value of p is what? ', 'What is 3?'],
		       'id1x4': ['(T/F) Unlike Java, the value of an expression in a switch statement in JavaScript can be any type. ', 'What is true?'],
		       'id2x0': ['(T/F) A best practice is to declare for loop variables inside the loop definition. For example,   for (var i = 0; i < 100; i++) ', 'What is false?'],
		       'id2x1': ['(T/F) There are significant differences between the way the for, while, and do/while loops work between Java and JavaScript. ', 'What is false?'],
		       'id2x2': ['(T/F) The while loop is more commonly used than the do/while loop. ', 'What is true?'],
		       'id2x3': ['(T/F) The break and continue keywords work the same and can be used interchangeably and are for all intents and purposes the same.', 'What is false?'],
		       'id2x4': ['(T/F) The continue keyword will abort the current iteration and restart the loop in the next iteration. ', 'What is true?'],
		       'id3x0': ['new', 'What is a reserved word?'],
		       'id3x1': ['do', 'What is a reserved word?'],
		       'id3x2': ['int', 'What is not a reserved word?'],
		       'id3x3': ['try', 'What is a reserved word?'],
		       'id3x4': ['enum', 'What is not a reserved word?'],
		       'id4x0': ['These denote object literals.', 'What are curly braces?'],
		       'id4x1': ['Objects are collections of these.', 'What are key value pairs?'],
		       'id4x2': ['These are object keys assigned to functions.', 'What are methods?'],
		       'id4x3': ['JavaScript classes implement inheritance through these.', 'What are prototypes?'],
		       'id4x4': ['Daily Double!  Object literals are often used to replace this branching statement.', 'What is the case statement?'],
		       'id5x0': ['Functions are these too, like everything else in JavaScript.', 'What are objects?'],
		       'id5x1': ['These are functions without names.', 'What are anonymous functions?'],
		       'id5x2': ['Besides global, only functions have this - not blocks.', 'What is scope?'],
		       'id5x3': ['This JavaScript idiom can be used to create "private" scope, among other things.', 'What is a self-executing anonymous function?'],
		       'id5x4': ['If a function maintains a reference to it\'s enclosing scope it\'s called this.', 'What is a closure?']
		      }
	   };
